"""Add tables

Revision ID: d5f03f0ce371
Revises: 46e4ae20e795
Create Date: 2025-01-03 14:14:25.014096
"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "d5f03f0ce371"
down_revision: Union[str, None] = "46e4ae20e795"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "region",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(),
            autoincrement=True,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_region_id"), "region", ["id"], unique=False)
    op.create_table(
        "user",
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=True),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column(
            "avatar_seed",
            sa.String(),
            server_default=sa.text("md5(random()::text)"),
            nullable=False,
        ),
        sa.Column("stars_count", sa.Integer(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint("stars_count >= 0", name="positive_stars_count"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_id"), "user", ["id"], unique=False)
    op.create_table(
        "item",
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=True),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "targeted_age_months",
            postgresql.INT4RANGE(),
            server_default=sa.text("'[0,]'::int4range"),
            nullable=False,
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("blocked", sa.Boolean(), nullable=False),
        sa.Column(
            "searchable_text",
            sa.String(),
            sa.Computed(
                "normalize_text(name || ' ' || description)",
            ),
            nullable=False,
        ),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_item_searchable_text",
        "item",
        ["searchable_text"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={"searchable_text": "gist_trgm_ops"},
    )
    op.create_index(op.f("ix_item_id"), "item", ["id"], unique=False)
    op.create_table(
        "report",
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "report_type",
            sa.Enum("user", "item", "chat", name="reporttype"),
            nullable=False,
        ),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("saved_info", sa.String(), nullable=False),
        sa.Column("context", sa.String(), nullable=False),
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=True),
            autoincrement=True,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_report_id"), "report", ["id"], unique=False)
    op.create_table(
        "chat",
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("borrower_id", sa.Integer(), nullable=False),
        sa.Column("last_message_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["borrower_id"], ["user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("item_id", "borrower_id"),
    )
    op.create_table(
        "item_image",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "order",
            sa.Integer(),
            sa.Identity(always=True, start=1, increment=1),
            nullable=False,
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("item_id", sa.Integer(), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("name"),
    )
    op.create_index(op.f("ix_item_image_name"), "item_image", ["name"], unique=True)
    op.create_table(
        "item_like",
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=True),
            autoincrement=True,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("item_id", "user_id", "id"),
        sa.UniqueConstraint("item_id", "user_id"),
    )
    op.create_index(op.f("ix_item_like_id"), "item_like", ["id"], unique=False)
    op.create_table(
        "item_region",
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("region_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.ForeignKeyConstraint(
            ["region_id"],
            ["region.id"],
        ),
        sa.PrimaryKeyConstraint("item_id", "region_id"),
    )
    op.create_table(
        "item_save",
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=True),
            autoincrement=True,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["item.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("item_id", "user_id", "id"),
        sa.UniqueConstraint("item_id", "user_id"),
    )
    op.create_index(op.f("ix_item_save_id"), "item_save", ["id"], unique=False)
    op.create_table(
        "chat_message",
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("borrower_id", sa.Integer(), nullable=False),
        sa.Column(
            "message_type",
            sa.Enum(
                "text",
                "loan_request_created",
                "loan_request_canceled",
                "loan_request_accepted",
                "loan_request_rejected",
                "loan_started",
                "loan_ended",
                "item_not_available",
                name="chatmessagetype",
            ),
            nullable=False,
        ),
        sa.Column("sender_id", sa.Integer(), nullable=False),
        sa.Column("payload", sa.Text(), nullable=True),
        sa.Column("seen", sa.Boolean(), nullable=False),
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=True),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["item_id", "borrower_id"],
            ["chat.item_id", "chat.borrower_id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["sender_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_chat_message_id"), "chat_message", ["id"], unique=False)
    op.create_table(
        "loan",
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("borrower_id", sa.Integer(), nullable=True),
        sa.Column(
            "during",
            postgresql.TSTZRANGE(),
            server_default=sa.text("tstzrange(now(), NULL, '()')"),
            nullable=False,
        ),
        sa.Column("creation_message_id", sa.Integer(), nullable=False),
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=True),
            autoincrement=True,
            nullable=False,
        ),
        postgresql.ExcludeConstraint(
            (sa.column("item_id"), "="),
            (sa.column("during"), "&&"),
            using="gist",
            name="loan_no_overlapping_date_ranges",
        ),
        sa.ForeignKeyConstraint(["borrower_id"], ["user.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["creation_message_id"], ["chat_message.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("borrower_id"),
    )
    op.create_index(op.f("ix_loan_during"), "loan", ["during"], unique=False)
    op.create_index(op.f("ix_loan_id"), "loan", ["id"], unique=False)
    op.create_index(op.f("ix_loan_item_id"), "loan", ["item_id"], unique=False)
    op.create_table(
        "loan_request",
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("borrower_id", sa.Integer(), nullable=False),
        sa.Column(
            "state",
            sa.Enum(
                "pending",
                "canceled",
                "accepted",
                "rejected",
                "executed",
                name="loanrequeststate",
            ),
            nullable=False,
        ),
        sa.Column(
            "loan_id",
            sa.Integer(),
            nullable=True,
            comment="The created loan originating from this loan request.",
        ),
        sa.Column("creation_message_id", sa.Integer(), nullable=False),
        sa.Column(
            "id",
            sa.Integer(),
            sa.Identity(always=True),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        postgresql.ExcludeConstraint(
            (sa.column("item_id"), "="),
            (sa.column("borrower_id"), "="),
            where=sa.text("state = 'pending'"),
            using="gist",
            name="loan_request_unique_pending_request",
        ),
        sa.CheckConstraint(
            "state = 'executed' AND loan_id IS NOT NULL OR state != 'executed' AND loan_id IS NULL",
            name="loan_request_executed_or_not",
        ),
        sa.ForeignKeyConstraint(["borrower_id"], ["user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["creation_message_id"],
            ["chat_message.id"],
        ),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["loan_id"],
            ["loan.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_loan_request_id"), "loan_request", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_loan_request_id"), table_name="loan_request")
    op.drop_table("loan_request")
    op.drop_index(op.f("ix_loan_item_id"), table_name="loan")
    op.drop_index(op.f("ix_loan_id"), table_name="loan")
    op.drop_index(op.f("ix_loan_during"), table_name="loan")
    op.drop_table("loan")
    op.drop_index(op.f("ix_chat_message_id"), table_name="chat_message")
    op.drop_table("chat_message")
    op.drop_index(op.f("ix_item_save_id"), table_name="item_save")
    op.drop_table("item_save")
    op.drop_table("item_region")
    op.drop_index(op.f("ix_item_like_id"), table_name="item_like")
    op.drop_table("item_like")
    op.drop_index(op.f("ix_item_image_name"), table_name="item_image")
    op.drop_table("item_image")
    op.drop_table("chat")
    op.drop_index(op.f("ix_report_id"), table_name="report")
    op.drop_table("report")
    op.drop_index(op.f("ix_item_id"), table_name="item")
    op.drop_index(
        "idx_item_searchable_text",
        table_name="item",
        postgresql_using="gist",
        postgresql_ops={"searchable_text": "gist_trgm_ops"},
    )
    op.drop_table("item")
    op.drop_index(op.f("ix_user_id"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_region_id"), table_name="region")
    op.drop_table("region")

    op.execute(text("DROP TYPE reporttype"))
    op.execute(text("DROP TYPE chatmessagetype"))
    op.execute(text("DROP TYPE loanrequeststate"))

    # ### end Alembic commands ###
